{
  "author": {
    "name": "Michael Benford",
    "email": "michael@michaelbenford.net"
  },
  "name": "ng-tags-input",
  "prettyName": "ngTagsInput",
  "version": "2.3.0",
  "description": "Tags input directive for AngularJS",
  "license": "MIT",
  "homepage": "http://mbenford.github.io/ngTagsInput",
  "repository": {
    "type": "git",
    "url": "https://github.com/mbenford/ngTagsInput.git"
  },
  "bugs": {
    "url": "https://github.com/mbenford/ngTagsInput/issues"
  },
  "keywords": [
    "angular",
    "tags",
    "tags-input"
  ],
  "scripts": {
    "test": "grunt test"
  },
  "main": "build/ng-tags-input.min.js",
  "dependencies": {},
  "devDependencies": {
    "grunt": "0.4.5",
    "glob": "4.4.2",
    "load-grunt-tasks": "3.1.0",
    "grunt-contrib-uglify": "0.8.0",
    "grunt-contrib-cssmin": "0.12.2",
    "grunt-contrib-watch": "0.6.1",
    "grunt-contrib-jshint": "0.11.0",
    "grunt-contrib-compress": "0.13.0",
    "grunt-contrib-clean": "0.6.0",
    "grunt-contrib-concat": "0.5.1",
    "grunt-ng-annotate": "0.10.0",
    "grunt-angular-templates": "0.5.7",
    "grunt-karma": "0.10.1",
    "grunt-karma-coveralls": "2.5.3",
    "grunt-open": "0.2.3",
    "grunt-conventional-changelog": "1.1.0",
    "grunt-bump": "0.3.0",
    "grunt-contrib-copy": "0.8.0",
    "grunt-text-replace": "0.4.0",
    "grunt-shell": "1.1.2",
    "grunt-contrib-sass": "0.9.2",
    "karma-coverage": "0.2.7",
    "karma-jasmine": "0.3.4",
    "karma-chrome-launcher": "0.1.7",
    "karma-phantomjs-launcher": "0.1.4",
    "karma-firefox-launcher": "0.1.4",
    "karma-opera-launcher": "0.1.0",
    "karma-sauce-launcher": "0.2.10",
    "karma-ng-html2js-preprocessor": "0.1.2"
  },
  "readme": "# ngTagsInput \n\n[![Travis](https://img.shields.io/travis/mbenford/ngTagsInput.svg?style=flat)](https://travis-ci.org/mbenford/ngTagsInput)\n[![Coveralls](https://img.shields.io/coveralls/mbenford/ngTagsInput.svg?style=flat)](https://coveralls.io/r/mbenford/ngTagsInput?branch=master)\n[![David](https://img.shields.io/david/dev/mbenford/ngTagsInput.svg?style=flat)](https://david-dm.org/mbenford/ngTagsInput#info=devDependencies)\n[![GitHub release](https://img.shields.io/github/release/mbenford/ngTagsInput.svg)](https://github.com/mbenford/ngTagsInput/releases)\n[![Gratipay](https://img.shields.io/gratipay/mbenford.svg)](https://gratipay.com/mbenford)\n\nTags input directive for AngularJS. Check out the [ngTagsInput website](http://mbenford.github.io/ngTagsInput) for more information.\n\n## Requirements\n\n - AngularJS 1.2.24+ (v1.3 isn't officially supported yet)\n - A modern browser (Chrome 31+, Firefox 29+, Safari 7+, Opera 12+, IE 10+)\n\n## Installing\n\nAll files are available from a variety of sources. Choose the one that best fits your needs:\n\n- Direct download (https://github.com/mbenford/ngTagsInput/releases)\n- NPM (`npm install ng-tags-input --save`)\n- Bower (`bower install ng-tags-input --save`)\n- CDNJS (http://cdnjs.com/libraries/ng-tags-input)\n\nYou can also grab the [latest build](http://shrub.appspot.com/ng-tags-input) generated by Travis. It's fully functional and may contain new features and bugfixes not yet published to the services listed above.\n\nNow all you have to do is add the scripts to your application. Just make sure the `ng-tags-input.js` file is inserted **after** the `angular.js` script:\n\n```html\n<script src=\"angular.js\"></script>\n<script src=\"ng-tags-input.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"ng-tags-input.css\">\n```\n\n## Usage\n\n 1. Add the `ngTagsInput` module as a dependency in your AngularJS app;\n 2. Add the custom element `<tags-input>` to the HTML file where you want to use an input tag control and bind it to a property of your model. That property, if it exists, must be an array of objects and each object must have a property named `text` containing the tag text;\n 3. Set up the options that make sense to your application;\n 4. Enable autocomplete, if you want to use it, by adding the directive `<auto-complete>` inside the `<tags-input>` tag, and bind it to a function of your model. That function must return either an array of objects or a promise that eventually resolves to an array of objects (same rule from step 2 applies here);\n 5. Customize the CSS classes, if you want to.\n 6. You're done!\n\n**Note:** There's a more detailed [getting started](http://mbenford.github.io/ngTagsInput/gettingstarted) guide on the ngTagsInput website.\n\n## Example\n\n```html\n<html>\n<head>\n    <script src=\"angular.min.js\"></script>\n    <script src=\"ng-tags-input.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"ng-tags-input.min.css\">\n    <script>\n        angular.module('myApp', ['ngTagsInput'])\n            .controller('MyCtrl', function($scope, $http) {\n                $scope.tags = [\n                    { text: 'just' },\n                    { text: 'some' },\n                    { text: 'cool' },\n                    { text: 'tags' }\n                ];\n                $scope.loadTags = function(query) {\n                     return $http.get('/tags?query=' + query);\n                };\n            });\n    </script>\n</head>\n<body ng-app=\"myApp\" ng-controller=\"MyCtrl\">\n    <tags-input ng-model=\"tags\">\n        <auto-complete source=\"loadTags($query)\"></auto-complete>\n    </tags-input>\n</body>\n</html>\n```\n\n## Options\n\nCheck out the [documentation](http://mbenford.github.io/ngTagsInput/documentation/api) page for a detailed view of all available options.\n\n## Demo\n\nYou can see the directive in action in the [demo page](http://mbenford.github.io/ngTagsInput/demos).\n\n## Contributing\n\nBefore posting an issue or sending a pull request, make sure to read the [CONTRIBUTING](https://github.com/mbenford/ngTagsInput/blob/master/CONTRIBUTING.md) file.\n\n## License\n\nSee the [LICENSE](https://github.com/mbenford/ngTagsInput/blob/master/LICENSE) file.\n\n## Changelog\n\nSee the [CHANGELOG](https://github.com/mbenford/ngTagsInput/blob/master/CHANGELOG.md) page.\n\n## Alternatives\n\nThe following are some alternatives to ngTagsInput you may want to check out:\n\n- [angular-tags](http://decipherinc.github.io/angular-tags): Pure AngularJS tagging widget with typeahead support courtesy of ui-bootstrap\n- [angular-tagger](https://github.com/monterail/angular-tagger): Pure Angular autocomplete with tags, no jQuery\n- [jsTag](https://github.com/eranhirs/jstag): Open source project for editing tags (aka tokenizer) based on AngularJS\n- [bootstrap-tagsinput](http://timschlechter.github.io/bootstrap-tagsinput/examples): jQuery plugin providing a Twitter Bootstrap user interface for managing tags (provides Angular support)\n",
  "readmeFilename": "README.md",
  "_id": "ng-tags-input@2.3.0",
  "_shasum": "42724f8f7038990609d6b68ef23ab58832c9dd5c",
  "_from": "ng-tags-input@2.3.0",
  "_resolved": "https://registry.npmjs.org/ng-tags-input/-/ng-tags-input-2.3.0.tgz"
}
